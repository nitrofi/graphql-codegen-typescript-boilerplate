# Define environment variables in .env

# Define where schema is located
schema:
  ${ENDPOINT}:
    headers:
      Authorization: ${TOKEN}
# Where to look for graphql definitions
documents:
  - src/**/*.graphql
  - src/**/*.ts
hooks:
  # Prettify after generation
  afterAllFileWrite: prettier --write
generates:
  # Defines files to be created.
  # Everything is contained in one file here for simplicity.
  # Could possibly generate definitions (*.d.ts) and separately.
  ./src/generated/codegen.ts:
    # Define plugins used by codegen for this file block
    plugins:
      # @package @graphql-codegen/add
      # @see https://www.the-guild.dev/graphql/codegen/plugins/other/add
      # adds custom text to output file.
      - add:
          content: // IMPORTANT! GENERATED BY GraphQL @graphql-codegen/cli - DO NOT MODIFY BY HAND

      # *** @graphql-codegen/typescript ***
      # This plugin generates the base TypeScript types. The types generated by this plugin are simple, and refers to the exact structure of your schema, and it's used as the base types for other plugins (such as typescript-operations / typescript-resolvers)
      - typescript

      # *** @graphql-codegen/typescript-operations ***
      # This plugin generates TypeScript types based on your GraphQLSchema and your GraphQL operations and fragments. It generates types for your GraphQL documents: Query, Mutation, Subscription and Fragment.
      # @depends on types generated by @package @graphql-codegen/typescript
      - typescript-operations

      # *** @graphql-codegen/typescript-document-nodes ***
      - typescript-document-nodes:
          # Use custom gql`` wrapper
          # Could be any library as well like `fake-tag` or `graphql-tag``
          gqlImport: ../utils/fakeTag.js

      # *** @graphql-codegen/typed-document-node ***
      #
      # Alternative for @package @graphql-codegen/typescript-document-nodes.
      #
      # graphql-typed-document-node is a development tool for creating fully typed DocumentNode objects. It means that just by passing the GraphQL query/mutation/subscription/fragment to a supporting GraphQL client library, you'll get a fully type result object and variables object.
      # @depends on types generated by:
      #   @package @graphql-codegen/typescript
      #   @package @graphql-codegen/typescript-operations
      - typed-document-node

    # These configs apply to all defined plugins.
    # Could be defined per plugin to be more explicit.
    config:
      # Generates enum as TypeScript type instead of enum. Useful if you wish to generate .d.ts declaration file instead of .ts
      # In this case, we don't want enums in our generated js output (via tsc)
      enumsAsTypes: true # defaults false
      # <Scalar> overwrites
      scalars:
        # correct type for record id: defaults to any
        ItemId: string
      # __typename can't be optional
      nonOptionalTypename: true
      namingConvention:
        # Solves "Duplicate identifier error"
        # @see https://github.com/dotansimha/graphql-code-generator/issues/642
        enumValues: keep
      # Protect data from mutation
      immutableTypes: true
      # Will use import type {} rather than import {} when importing only types. This gives compatibility with TypeScript's "importsNotUsedAsValues": "error" option
      useTypeImports: true
